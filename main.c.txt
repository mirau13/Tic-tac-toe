#include <hidef.h>      /* common defines and macros */
#include <mc9s12dg256.h>     /* derivative information */
#pragma LINK_INFO DERIVATIVE "mc9s12dg256b"
#include <string.h>
#include <stdlib.h>

void MSDelay(unsigned int);
unsigned char randomChoice(void);
void sendChar(unsigned char);
void printNewLine(void);
void sendString(unsigned char, int);
void printRules(void);
void printTable(void);
int endGame(void);
void printGame(void);
void showWinner(void);
int checkChoice(void);
void putChoice(unsigned char);
int playGameX(void);
int playGame0(void);
void readChar(void);
int countGenerator(void);
void resetGame(void);

void MSDelay(unsigned int itime){
  unsigned int i; unsigned int j;
  for(i=0;i<itime;i++)
    for(j=0;j<4000;j++); //1 msec. tested using Scope
}

unsigned char winner; //used to store the winner
unsigned char player; //used to store the player's choice (X->1 or 0->0)
int global_flag; //to know if the game ends on half an iteration (2 moves are made in one iteration->one from player and one from the mighty Dragon)
unsigned char choice; //used to store the current move (from 1 to 9)
unsigned char column,row,myRow; //to read the keypad

unsigned char variants[9] = {'1','2','3','4','5','6','7','8','9',      //vector for the mighty Dragon to help him make a choice
};
int variants_index = 9; //to store the current lenght of the above vector


const unsigned char table[7][7] = {        //to display the playing board with possible moves
  '_','_','_','_','_','_','_',
  '|','1','|','2','|','3','|',
  '_','_','_','_','_','_','_',
  '|','4','|','5','|','6','|',
  '_','_','_','_','_','_','_',
  '|','7','|','8','|','9','|',
  '_','_','_','_','_','_','_',
};

unsigned char gameTable[7][7] = {			//to store the current game status (0->0 1->X 2->empty)
  '_','_','_','_','_','_','_',
  '|','2','|','2','|','2','|',
  '_','_','_','_','_','_','_',
  '|','2','|','2','|','2','|',
  '_','_','_','_','_','_','_',
  '|','2','|','2','|','2','|',
  '_','_','_','_','_','_','_',
};

const unsigned char keypad[4][4] =
{
'1','2','3','A',
'4','5','6','B',
'7','8','9','C',
'*','0','#','D'
};

void resetGame(){
  global_flag = 0;
  
  variants_index = 9;
  
  gameTable[1][1] = '2'; 
  gameTable[1][3] = '2';
  gameTable[1][5] = '2';
  gameTable[3][1] = '2';
  gameTable[3][3] = '2';
  gameTable[3][5] = '2';
  gameTable[5][1] = '2';
  gameTable[5][3] = '2';
  gameTable[5][5] = '2';
  
  variants[0] = '1';
  variants[1] = '2';
  variants[2] = '3';
  variants[3] = '4';
  variants[4] = '5';
  variants[5] = '6';
  variants[6] = '7';
  variants[7] = '8';
  variants[8] = '9';
}
/*
int countGenerator(){
	int my_count = 10;

	return my_count;
}
*/
int countGenerator(){
	int my_count = 0;
	
	while(((PTH_PTH0 & 1) == 0) || ((PTH_PTH1 & 1) == 0) || ((PTH_PTH2 & 1) == 0) || ((PTH_PTH3 & 1) == 0)){
		my_count++; //increment the value while no button is pressed
	}
	
	return my_count;
}

unsigned char randomChoice(){		//generate the mighty Dragon choice
  int r;	//random name
  int t;	//random name
  unsigned char ret, aux;
  
  t = countGenerator();
  
  r = t % variants_index; 
  
  ret = variants[r];
  aux = variants[variants_index-1];
  
  variants[variants_index-1] = variants[r];
  variants[r] = aux;
  variants_index--;	//after a choice was made decrement the total possibilities of the mighty Dragon
  
  return ret;
}

//Send a char from the PC to the mighty Dragon
void sendChar(unsigned char c){
  //SCISWAI deactivate SCI in waiting mode
  //1 = SCI deactivate in waiting mode
  //0 = SCI activate in waiting mode
  while (!((SCI0SR1 & 1<<7) != 0));
  SCI0DRL = c;
}

//print new line
void printNewLine(){
    unsigned char aux;          
    aux = 0x0D;
    sendChar(aux);
    MSDelay(10);
    aux=0x0A;
    sendChar(aux);
}

//send a string from PC to the mighty Dragon
void sendString(unsigned char s[],int index){
  int i;
  
    for(i=0;i<index;i++){
        sendChar(s[i]);
    }
    printNewLine();
}

//print game rules
void printRules(){
  sendString("Reguli joc:",12);
  printNewLine();
  sendString("1.Jucatorul x incepe.",22);
  printNewLine();
  sendString("2.Mutarile se fac alternativ.",30);
  printNewLine();
  sendString("3.Castiga cel care are 3 semne proprii pe o linie/coloana/diagonala.",69);
  printNewLine();
  sendString("4.Daca tabla este plina si nu s-a indeplinit regula 3, este remiza.",68);
  printNewLine();
}



//print the table "table"
void printTable(){
   int i;
   for(i=0;i<7;i++){
      sendString(table[i], 7);
   }
   printNewLine();
}

int endGame(){		//function that return 1 if the game has end and 0 otherwise; Also set the winner if the game has end
  int flag = 1;
  int i,j;
  
  if(gameTable[1][1] == gameTable[1][3] && gameTable[1][3] == gameTable[1][5] && gameTable[1][1] != '2'){
    winner = gameTable[1][1];
    return 1;
  }
  
  if(gameTable[3][1] == gameTable[3][3] && gameTable[3][3] == gameTable[3][5] && gameTable[3][1] != '2'){
    winner = gameTable[3][1];
    return 1;
  }
  
  if(gameTable[5][1] == gameTable[5][3] && gameTable[5][3] == gameTable[5][5] && gameTable[5][5] != '2'){
    winner = gameTable[1][1];
    return 1;
  }
  
  if(gameTable[1][1] == gameTable[3][1] && gameTable[3][1] == gameTable[5][1] && gameTable[1][1] != '2'){
    winner = gameTable[1][1];
    return 1;
  }
  
  if(gameTable[1][3] == gameTable[3][3] && gameTable[3][3] == gameTable[5][3] && gameTable[3][3] != '2'){
    winner = gameTable[1][3];
    return 1;
  }
  
  if(gameTable[1][5] == gameTable[3][5] && gameTable[3][5] == gameTable[5][5] && gameTable[5][5] != '2'){
    winner = gameTable[1][5];
    return 1;
  }
  
  if(gameTable[1][1] == gameTable[3][3] && gameTable[3][3] == gameTable[5][5] && gameTable[1][1] != '2'){
    winner = gameTable[1][1];
    return 1;
  }
  
  if(gameTable[1][5] == gameTable[3][3] && gameTable[3][3] == gameTable[5][1] && gameTable[3][3] != '2'){
    winner = gameTable[1][1];
    return 1;
  }
  
  for(i=1;i<6;i = i+2){
    for(j=1;j<6;j = j+2){
       if(gameTable[i][j] == '2'){
          flag = 0; 
       }
    }
  }
  
  if(flag == 1){
    winner = '2';
    return 1;  
  }
  
  return 0;  
}

//print the current game table
void printGame(){
    int i,j;
    for(i=0;i<7;i++){
       for(j=0;j<7;j++){
          if(gameTable[i][j] == '2'){
             sendChar(' ');
          }else if(gameTable[i][j] == '1'){
             sendChar('X');
          }else if(gameTable[i][j] == '0'){
             sendChar('0');
          }else{
             sendChar(gameTable[i][j]);
          }
       }
       printNewLine();
    }  
}

void showWinner(){
  printGame();
  if(winner == player){
    sendString("Ai castigat!",13);
    
  }else if(winner == '2'){
    sendString("Remiza",7);  
  }else{
    sendString("Ai pierdut!",12);    
  }
}

//function that returns 0 if the chosen "choice" is already taken or invalid and 1 otherwise
int checkChoice(){
  int local_choice;//local_choice = atoi(choice);
  if(local_choice < 0 && local_choice > 10){
    sendString("Number out of range",20);
    printNewLine();
    return 0;
  }
  
  if(choice == '1'){
     if(gameTable[1][1] != '2'){
        sendString("Position already taken",23);
        printNewLine();
        return 0;
     }
  }
  
  if(choice == '2'){
     if(gameTable[1][3] != '2'){
        sendString("Position already taken",23);
        printNewLine();
        return 0;
     }
  }
  
  if(choice == '3'){
     if(gameTable[1][5] != '2'){
        sendString("Position already taken",23);
        printNewLine();
        return 0;
     }
  }
  
  if(choice == '4'){
     if(gameTable[3][1] != '2'){
        sendString("Position already taken",23);
        printNewLine();
        return 0;
     }
  }
  
  if(choice == '5'){
     if(gameTable[3][3] != '2'){
        sendString("Position already taken",23);
        printNewLine();
        return 0;
     }
  }
  
  if(choice == '6'){
     if(gameTable[3][5] != '2'){
        sendString("Position already taken",23);
        printNewLine();
        return 0;
     }
  }
  
  if(choice == '7'){
     if(gameTable[5][1] != '2'){
        sendString("Position already taken",23);
        printNewLine();
        return 0;
     }
  }
  
  if(choice == '8'){
     if(gameTable[5][3] != '2'){
        sendString("Position already taken",23);
        printNewLine();
        return 0;
     }
  }
  
  if(choice == '9'){
     if(gameTable[5][5] != '2'){
        sendString("Position already taken",23);
        printNewLine();
        return 0;
     }
  }
  
  return 1;
}

//insert the choice in the game table
void putChoice(unsigned char i){
  
  if(choice == '1'){
     gameTable[1][1] = i;
  }
  
  if(choice == '2'){
     gameTable[1][3] = i;
  }
  
  if(choice == '3'){
     gameTable[1][5] = i;
  }
  
  if(choice == '4'){
     gameTable[3][1] = i;
  }
  
  if(choice == '5'){
     gameTable[3][3] = i;
  }
  
  if(choice == '6'){
     gameTable[3][5] = i;
  }
  
  if(choice == '7'){
     gameTable[5][1] = i;
  }
  
  if(choice == '8'){
     gameTable[5][3] = i;
  }
  
  if(choice == '9'){
     gameTable[5][5] = i;
  }
}

//the mighty Dragon plays as 0
int playGameX(){
  int flag = 0;
  
  //the player choose
  while(flag != 1){	//untill the player make a valid choice
     sendString("Alege optiunea: ",17);
     readChar();
     choice = keypad[myRow][column];
     flag = checkChoice();
  }
  putChoice('1');	//insert the choice in the game table
  //check the game status
  global_flag = endGame();
  
  if(global_flag == 0){
    printGame();	//if the game didn't end, show the game table
  }else{
    return 0;	//if the game ended, stop the mighty Dragon to make a choice
  }
  
  //the mighty Dragon choose
  flag = 0;
  while(flag != 1){ //untill the mighty Dragon is able to make a valid choice
     sendString("Placa alege: ",14);
     choice = randomChoice();
     flag = checkChoice();
  }
  
  putChoice('0'); //insert the choice in the game table
  global_flag = endGame();
  
  if(global_flag == 0){
    printGame();
  }else{
    return 0;
  }
}

//the mighty Dragon plays as X
int playGame0(){
  int flag = 0;
  
  //the mighty Dragon choose
  while(flag != 1){
     sendString("Placa alege: ",14);
     choice = randomChoice();
     flag = checkChoice();
  }
  
  putChoice('1');
  global_flag = endGame();
  
  if(global_flag == 0){
    printGame();
  }else{
    return 0;
  }
  
  //the player choose
  flag = 0;
  while(flag != 1){
     sendString("Alege optiunea: ",17);
     readChar();
     choice = keypad[myRow][column];
     flag = checkChoice();
  }
  
  putChoice('0');
  global_flag = endGame();
  
  if(global_flag == 0){  
    printGame();
  }else{
    return 0;
  }  
}

//read a char from the keypad
void readChar(){
    do{                            
         PORTA = PORTA | 0x0F;            //COLUMNS SET HIGH
         row = PORTA & 0xF0;              //READ ROWS
      }while(row == 0x00);                //WAIT UNTIL KEY PRESSED
     if(row == 0x10){
         myRow=0; 
 
      }
      else if(row == 0x20){
         myRow=1;
 
      }
      else if(row == 0x40){
         myRow=2;
 
      }
      else if(row == 0x80){
         myRow=3;
 
      }


      do{                       
         do{                         
            MSDelay(1);        
            row = PORTA & 0xF0;           //READ ROWS
         }while(row == 0x00);             //CHECK FOR KEY PRESS
         
         MSDelay(15);                     //WAIT FOR DEBOUNCE
         row = PORTA & 0xF0;
      }while(row == 0x00);                //FALSE KEY PRESS

      while(1){                         
         PORTA &= 0xF0;                   //CLEAR COLUMN
         PORTA |= 0x01;                   //COLUMN 0 SET HIGH
         row = PORTA & 0xF0;              //READ ROWS
         if(row != 0x00){                 //KEY IS IN COLUMN 0
            column = 0;
            break;                        
         }
         PORTA &= 0xF0;                   //CLEAR COLUMN
         PORTA |= 0x02;                   //COLUMN 1 SET HIGH
         row = PORTA & 0xF0;              //READ ROWS
         if(row != 0x00){                 //KEY IS IN COLUMN 1
            column = 1;
            break;                        
         }

         PORTA &= 0xF0;                   //CLEAR COLUMN
         PORTA |= 0x04;                   //COLUMN 2 SET HIGH
         row = PORTA & 0xF0;              //READ ROWS
         if(row != 0x00){                 //KEY IS IN COLUMN 2
            column = 2;
            break;                        
         }
         PORTA &= 0xF0;                   //CLEAR COLUMN
         PORTA |= 0x08;                   //COLUMN 3 SET HIGH
         row = PORTA & 0xF0;              //READ ROWS
         if(row != 0x00){                 //KEY IS IN COLUMN 3
            column = 3;
            break;                        
         }
         row = 0;                         //KEY NOT FOUND
      break;                              
      } 
      
      do{
         MSDelay(15);
         PORTA = PORTA | 0x0F;            //COLUMNS SET HIGH
         row = PORTA & 0xF0;              //READ ROWS
      }while(row != 0x00);                //MAKE SURE BUTTON IS NOT STILL HELD
}

void main(void) {
  /* I put my own code here */
  EnableInterrupts;
  DDRA = 0x0F; //MAKE ROWS INPUT AND COLUMNS OUTPUT
  //set registers
  SCI0BDH = 0x00;
  SCI0BDL = 0x1A;
  
  //Transmitter enabled
  SCI0CR1 = 0x00;
  //Receiver enable
  SCI0CR2 = 0x0C;
  
  //for PORTH
  DDRH = 0x00;

  global_flag = 1;
   
  for(;;) {
  printRules();
  printTable();
  //The player choose his destiny
  sendString("1 - Start first",16);
  printNewLine();
  sendString("0 - Start second",17);
  printNewLine();
  readChar();
  player = keypad[myRow][column];
  //Let the game begin
  while(endGame() != 1 || global_flag != 1){ 
    if(player == '1'){
      playGameX();  
    }else{
      playGame0();
    }
    
    global_flag = endGame();
  }
  //let the game end
  showWinner();
  
  resetGame();
  MSDelay(1000); //wait 10 seconds untill game restarts
  }/* wait forever.... or untill you slay the mighty Dragon */
}